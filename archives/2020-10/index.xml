<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020-10 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/archives/2020-10/</link>
    <description>Recent content in 2020-10 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 31 Oct 2020 00:53:37 -0400</lastBuildDate><atom:link href="https://ottffyzy.github.io/archives/2020-10/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[算法][数论] 最大公约数（GCD）与欧几里得算法</title>
      <link>https://ottffyzy.github.io/algos/nt/gcd/</link>
      <pubDate>Sat, 31 Oct 2020 00:53:37 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/nt/gcd/</guid>
      <description>最大公约数（GCD）与欧几里得算法 最大公约数（Greatest Common Divisor，GCD） 两个数最大公约数顾名思义，两个数的所有公约数中最大的。 若正整数 $a,b$ 的质因数分解为 $$a = \prod_{i} p_i ^ {e_{a,i}}$$ $$b = \prod_{i} p_i ^ {e_{b,i}}$$ 则其最大公</description>
    </item>
    
    <item>
      <title>[模板] 对拍程序</title>
      <link>https://ottffyzy.github.io/tpls/others/checker/</link>
      <pubDate>Tue, 20 Oct 2020 00:10:35 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/checker/</guid>
      <description>对拍程序 from os import system tc=0 while True: system(&amp;#34;python data.py &amp;gt; data.in&amp;#34;) system(&amp;#34;std.exe &amp;lt; data.in &amp;gt; std.out&amp;#34;) system(&amp;#34;my.exe &amp;lt; data.in &amp;gt; my.out&amp;#34;) # system(&amp;#34;diff std.out my.out &amp;gt; diff.out&amp;#34;): if system(&amp;#34;fc std.out my.out &amp;gt; diff.out&amp;#34;): print(&amp;#34;WA&amp;#34;) break else: tc += 1 print(&amp;#34;AC #%d&amp;#34;%tc) print(&amp;#34;-------------------- data.in --------------------&amp;#34;) # system(&amp;#34;cat data.in&amp;#34;) system(&amp;#34;type data.in&amp;#34;) print(&amp;#34;-------------------- std.out --------------------&amp;#34;) system(&amp;#34;type std.out&amp;#34;) print(&amp;#34;-------------------- my.out ---------------------&amp;#34;) system(&amp;#34;type my.out&amp;#34;) Powershell #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main() { int tc=0; while(1) { system(&amp;#34;./E_data &amp;gt; data.in&amp;#34;); system(&amp;#34;cat data.in | ./E_std.exe &amp;gt; std.txt&amp;#34;); system(&amp;#34;cat data.in | ./E.exe &amp;gt; my.txt&amp;#34;); if(system(&amp;#34;diff std.txt my.txt &amp;gt; diff.txt&amp;#34;)) { cout&amp;lt;&amp;lt;&amp;#34;WA&amp;#34;&amp;lt;&amp;lt;endl; break; } else</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 树状数组 Binary Index Tree/Fenwick Tree</title>
      <link>https://ottffyzy.github.io/tpls/ds/bit/</link>
      <pubDate>Thu, 01 Oct 2020 12:09:44 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/bit/</guid>
      <description>树状数组 Binary Index Tree/Fenwick Tree 1d 单点修改，区间询问 // T must + - // id 1~n template&amp;lt;typename T,size_t M,typename OpPlus=plus&amp;lt;T&amp;gt;,typename OpMinus=minus&amp;lt;T&amp;gt;&amp;gt; struct BIT { static int lowbit(int x) { return x&amp;amp;(-x); } constexpr static OpPlus opp{}; constexpr static OpMinus opm{}; static T tmp[M+1]; T tree[M+1]; // tree[i] -&amp;gt; sum of [i-lowbit(i)+1,i] int n; void init(int n_) { n=n_; for(int i=1;i&amp;lt;=n;i++) tree[i]=T(0); } void init(int n_,T v[]) // v[0 ~ n_-1] { n=n_; tmp[0]=T(0); for(int i=1;i&amp;lt;=n;i++) tmp[i]=opp(tmp[i-1],v[i]); for(int i=1;i&amp;lt;=n;i++) tree[i]=opm(tmp[i],tmp[i-lowbit(i)]); // for(int i=0;i&amp;lt;n;i++) add(i,v[i]); } void add(int p,T V) { for(;p&amp;lt;=n;p+=lowbit(p))</description>
    </item>
    
    <item>
      <title>[模板] 计时 Timing</title>
      <link>https://ottffyzy.github.io/tpls/others/timing/</link>
      <pubDate>Thu, 01 Oct 2020 00:08:34 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/timing/</guid>
      <description>计时 Timing chrono class Timing { private: typedef chrono::time_point&amp;lt;std::chrono::high_resolution_clock&amp;gt; TP; TP current_time() { return chrono::high_resolution_clock::now(); } TP st,ed; public: void start() { st=current_time(); } void end() { ed=current_time(); } void print() { cout&amp;lt;&amp;lt;chrono::duration_cast&amp;lt;chrono::microseconds&amp;gt;(ed-st).count() &amp;lt;&amp;lt;&amp;#34;ms\n&amp;#34;; } }timing;</description>
    </item>
    
  </channel>
</rss>
