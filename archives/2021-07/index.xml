<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2021-07 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/archives/2021-07/</link>
    <description>Recent content in 2021-07 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 31 Jul 2021 19:22:06 -0700</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/archives/2021-07/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][数据结构] 下标池 IdPool</title>
      <link>https://ottffyzy.github.io/tpls/ds/idpool/</link>
      <pubDate>Sat, 31 Jul 2021 19:22:06 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/idpool/</guid>
      <description>下标池 IdPool template&amp;lt;typename T&amp;gt; struct IdPool { map&amp;lt;T, int&amp;gt; idmap; vector&amp;lt;T&amp;gt; ett; void clear() { idmap.clear(); ett.clear(); } int getid(const T &amp;amp;t) { auto it = idmap.find(t); if (it != idmap.end()) return it-&amp;gt;second; int ans = ett.size(); ett.push_back(t); idmap[t] = ans; return ans; } T gett(int i) { return ett[i]; } int size() { return ett.size(); } }; IdPool&amp;lt;int&amp;gt; idp;</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 13 章 拷贝控制</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c13/</link>
      <pubDate>Wed, 21 Jul 2021 22:57:24 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c13/</guid>
      <description>第 13 章 拷贝控制 拷贝控制 copy control 操作包括： 拷贝构造函数 copy constructor 拷贝赋值运算符 copy-assignment operator 移动构造函数 move constructor 移动赋值运算符 move-assignment operator 析构函数 destructor 13.1 拷贝、赋值与销毁 合成拷贝构造函数 synthesized copy constructor #include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std; class A { public: string name; A() : name(&amp;#34;&amp;#34;) { cout &amp;lt;&amp;lt; &amp;#34;default ctor&amp;#34; &amp;lt;&amp;lt; endl; } A(string</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 12 章 动态内存</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c12/</link>
      <pubDate>Wed, 07 Jul 2021 00:59:01 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c12/</guid>
      <description>第 12 章 动态内存 静态内存用来存储 局部 static 对象，类 static 成员，定义在任何函数之外的变量。 栈内存用来存储 定义在函数内的非 static 对象。 除了这两部分，程序还拥有一个内存池。这部分内存被称为自由空间 free store 或 堆 heap。程序用</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 11 章 关联容器</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c11/</link>
      <pubDate>Mon, 05 Jul 2021 00:50:38 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c11/</guid>
      <description>第 11 章 关联容器 关联容器 associative-container map set multimap multiset unordered_map unordered_set unordered_multimap unordered_multiset 11.1 使用关联容器 map 通常称为关联数组 associative array。 11.2 关联容器概述 有序容器的关键字类型 需要定义 &amp;lt;，且该运算需要满足严格弱序 strict weak ordering。 11.2.3 pair 类型 pair 定义在</description>
    </item>
    
    <item>
      <title>[模板][计算几何] 平面最近点对</title>
      <link>https://ottffyzy.github.io/tpls/cg/nearestpair/</link>
      <pubDate>Sat, 03 Jul 2021 12:42:06 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/cg/nearestpair/</guid>
      <description>Title typedef long long LL; typedef vector&amp;lt;int&amp;gt; VI; typedef vector&amp;lt;VI&amp;gt; VVI; const LL INF=0x3f3f3f3f3f3f3f3f; inline LL sqr(LL x){ return x*x; } inline LL dis(const VI &amp;amp;a,const VI &amp;amp;b) { return sqr(a[0]-b[0])+sqr(a[1]-b[1]); } bool cmp(const VI &amp;amp;a, const VI &amp;amp;b) { return a[1]&amp;lt;b[1]; } VVI tmp; LL help(VVI &amp;amp;ps,int l,int r) { int n=r-l+1; if(n&amp;lt;=3) { LL ans=INF; for(int i=l;i&amp;lt;=r;i++) { for(int j=i+1;j&amp;lt;=r;j++) ans=min(ans,dis(ps[i],ps[j])); } sort(ps.begin()+l, ps.begin()+r+1, cmp); return ans; } int m=(l+r)&amp;gt;&amp;gt;1; int mp=ps[m][0]; LL ans=min(help(ps,l,m),help(ps,m+1,r)); int i=l,j=m+1,p=l; while(i&amp;lt;=m || j&amp;lt;=r) { if(i&amp;gt;m || j&amp;lt;=r&amp;amp;&amp;amp;cmp(ps[j],ps[i])) { tmp[p++]=ps[j++]; } else { tmp[p++]=ps[i++]; } } copy(tmp.begin()+l, tmp.begin()+r+1,ps.begin()+l); p=0; for(int i=l;i&amp;lt;=r;i++) { if(sqr(ps[i][0]-mp)</description>
    </item>
    
  </channel>
</rss>