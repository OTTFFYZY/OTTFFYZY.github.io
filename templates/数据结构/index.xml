<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 22 Oct 2020 18:03:19 -0400</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/templates/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板] bitset &amp; 位图</title>
      <link>https://ottffyzy.github.io/templates/ds/bitset/</link>
      <pubDate>Thu, 22 Oct 2020 18:03:19 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/bitset/</guid>
      <description>std::bitset #include &amp;lt;bitset&amp;gt; bitset&amp;lt;M&amp;gt; bs; bs[i]; // access bs.test(i); // access bs.count(i); // count 1 bs.size(); bs.any(); bs.none(); bs.all(); // cpp11 bs.set(); bs.set(i); // set i-th bit to 1 bs.reset(); bs.reset(i); bs.flip(); bs.flip(i); bs.to_string(); bs.to_ulong(); bs.to_ullong(); // cpp11 cout&amp;lt;&amp;lt;bs&amp;lt;&amp;lt;endl; 手写位图 Bitmap template&amp;lt;size_t M&amp;gt; struct BitMap { typedef unsigned int UI; UI map[M/32+1]; void reset() { memset(map,0,sizeof(map)); } void set() { memset(map,0xff,sizeof(map)); } void set(int i) { map[i&amp;gt;&amp;gt;5]|=1U&amp;lt;&amp;lt;(i&amp;amp;31); } void reset(int i) { map[i&amp;gt;&amp;gt;5]&amp;amp;=~(1U&amp;lt;&amp;lt;(i&amp;amp;31)); } void flip(int i) { map[i&amp;gt;&amp;gt;5]^=1U&amp;lt;&amp;lt;(i&amp;amp;31); } bool test(int i) { return map[i&amp;gt;&amp;gt;5]&amp;amp;(1U&amp;lt;&amp;lt;(i&amp;amp;31)); } };</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 树状数组 Binary Index Tree/Fenwick Tree</title>
      <link>https://ottffyzy.github.io/templates/ds/bit/</link>
      <pubDate>Thu, 01 Oct 2020 12:09:44 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/bit/</guid>
      <description>树状数组 Binary Index Tree/Fenwick Tree 1d 单点修改，区间询问 // id 0~n-1 template&amp;lt;typename T,size_t M,typename OpPlus=plus&amp;lt;T&amp;gt;,typename OpMinus=minus&amp;lt;T&amp;gt;&amp;gt; struct BIT { static int lowbit(int x) { return x&amp;amp;(-x); } T tree[M+1]; // tree[i] -&amp;gt; [i-lowbit(i)+1,i] T tmp[M+1]; OpPlus opp; OpMinus opm; int n; void init(int n_) { n=n_; for(int i=1;i&amp;lt;=n;i++) tree[i]=T(0); } void init(int n_,T[] v) { n=n_; tmp[0]=T(0); for(int i=0;i&amp;lt;n;i++) tmp[i+1]=opp(tmp[i],v[i]); for(int i=1;i&amp;lt;=n;i++) tree[i]=opm(tmp[i],tmp[i-lowbit(i)]); // for(int i=0;i&amp;lt;n;i++) add(i,v[i]); } void add(int p,T V) { for(p=p+1;p&amp;lt;=n;p+=lowbit(p)) tree[i]=opp(tree[i],V); } T sum(int p) { T ans(0); for(p=p+1;p;p-=lowbit(p)) ans=opp(ans,tree[p]); return ans; } T sum(int l,int</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 左偏树 Leftist Tree</title>
      <link>https://ottffyzy.github.io/templates/ds/leftist/</link>
      <pubDate>Sun, 27 Sep 2020 19:07:04 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/leftist/</guid>
      <description>左偏树 Leftist Tree // min leftist tree // T must define &amp;lt; // M: the size of the heap template&amp;lt;typename T,size_t M,typename Cmp=less&amp;lt;&amp;gt;&amp;gt; struct Leftist { T val[M]; int l[M],r[M],d[M]; int nn; // number of node Cmp cmp; void init() { nn=0; } // using val to build a leftist tree // return the id of the root int build(int n,T val_[]) { queue&amp;lt;int&amp;gt; qu; for(int i=1;i&amp;lt;=n;i++) qu.push(i); int u,v; while(qu.size()&amp;gt;1) { u=qu.front(); qu.pop(); v=qu.front(); qu.pop(); merge(u,v); qu.push(u); } return qu.front(); } int newtree(T v) { val[++nn]=v; r[nn]=l[nn]=d[nn]=0; return nn; } void merge(int &amp;amp;x,int y) // merge tree</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 并查集 Union Find / Disjoint Set Union</title>
      <link>https://ottffyzy.github.io/templates/ds/unionfind/</link>
      <pubDate>Thu, 24 Sep 2020 23:18:06 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/unionfind/</guid>
      <description>并查集 Union Find / Disjoint Set Union 路径压缩和按 size 合并 Union by Size // M: max number of set // id is in [0~M-1] template&amp;lt;size_t M&amp;gt; struct UF { int uf[M],sz[M]; int n; int ns; // number of set void init(int n_) { n=ns=n_; for(int i=0;i&amp;lt;n;i++) uf[i]=i,sz[i]=1; } int find(int x) { return x==uf[x]?x:uf[x]=find(uf[x]); } bool same(int x,int y) { return find(x)==find(y); } bool merge(int x,int y) { x=find(x); y=find(y); if(x==y) return false; if(sz[x]&amp;gt;sz[y]) swap(x,y); sz[y]+=sz[x]; uf[x]=y; ns--; return true; } }; Debug: void show() { cout&amp;lt;&amp;lt;&amp;#34;UnionFind:----------------------\n&amp;#34;; cout&amp;lt;&amp;lt;&amp;#34;id:&amp;#34;; for(int i=0;i&amp;lt;n;i++) cout&amp;lt;&amp;lt;&amp;#39;\t&amp;#39;&amp;lt;&amp;lt;i; cout&amp;lt;&amp;lt;&amp;#39;\n&amp;#39;;</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 二叉堆 Binary Heap</title>
      <link>https://ottffyzy.github.io/templates/ds/binaryheap/</link>
      <pubDate>Wed, 23 Sep 2020 23:12:58 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/binaryheap/</guid>
      <description>二叉堆 Binary Heap 模板：普通二叉堆 Heap // T must define &amp;lt; // min heap // M: max size of heap template&amp;lt;typename T,size_t M,typename Cmp=less&amp;lt;&amp;gt;&amp;gt; struct Heap { T h[M+1]; int n; Cmp cmp; void init() { n=0; } void init(T h_[],int n_) // h[0~n-1] { n=n_; for(int i=1;i&amp;lt;=n;i++) h[i]=h_[i-1]; for(int i=n/2;i;i--) sink(i); // O(n) } void push(T x) { h[++n]=x; swim(n); } T pop() { T res=h[1]; h[1]=h[n--]; sink(1); return res; } T top() // check n&amp;gt;=1 { return h[1]; } int size() { return n; } bool empty() { return n==0;</description>
    </item>
    
  </channel>
</rss>