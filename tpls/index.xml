<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tpls on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tpls/</link>
    <description>Recent content in Tpls on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 25 Apr 2021 18:19:08 -0700</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tpls/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板] 随机数 Random</title>
      <link>https://ottffyzy.github.io/tpls/others/rnd/</link>
      <pubDate>Sun, 25 Apr 2021 18:19:08 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/rnd/</guid>
      <description>随机数 Random #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long LL; struct FastIO { FastIO() { ios::sync_with_stdio(false); cin.tie(nullptr); } }fastio; mt19937 rnd(chrono::system_clock::now().time_since_epoch().count()); mt19937_64 rnd_64(chrono::system_clock::now().time_since_epoch().count()); // [0,r) int rndi(int r) { return rnd()%r; } // [l,r] r-l+1&amp;lt;=INT_MAX int rndi(int l,int r) { return rnd()%(r-l+1)+l; } LL rndll(LL l,LL r) { return rnd_64()%(r-l+1)+l; } char rndc() { return rndi(-128,127); } char rndc(const string &amp;amp;s) { return s[rndi(s.length())]; } char rnd_lower() { return rndi(26)+&amp;#39;a&amp;#39;; } char rnd_upper() { return rndi(26)+&amp;#39;A&amp;#39;; } char rnd_digit() { return rndi(10)+&amp;#39;0&amp;#39;; } char rnd_alpha() { int r=rndi(52); return r&amp;lt;26?(r+&amp;#39;a&amp;#39;):(r-26+&amp;#39;A&amp;#39;); } char rnd_alphadigit() { int r=rndi(62); if(r&amp;lt;10)</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 离散化 Discretization</title>
      <link>https://ottffyzy.github.io/tpls/ds/discretization/</link>
      <pubDate>Wed, 20 Jan 2021 11:39:32 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/discretization/</guid>
      <description>离散化 Discretization template&amp;lt;typename T, int IdFrom=0, typename OpLs=less&amp;lt;T&amp;gt;, typename OpEq=equal_to&amp;lt;T&amp;gt;&amp;gt; struct Dctz { static OpLs ls; static OpEq eq; vector&amp;lt;T&amp;gt; x; void clear() { x.clear(); } void add(T v) { x.push_back(v); } void init() { sort(x.begin(),x.end(),ls); x.erase(unique(x.begin(),x.end(),eq),x.end()); } int size() { return x.size(); } int id(const T &amp;amp;v) { return lower_bound(x.begin(),x.end(),v,ls)-x.begin()+IdFrom; } }; Dctz&amp;lt;&amp;gt; dc;</description>
    </item>
    
    <item>
      <title>[模板][数论] 扩展欧几里得算法（ExGCD）</title>
      <link>https://ottffyzy.github.io/tpls/nt/exgcd/</link>
      <pubDate>Sun, 01 Nov 2020 22:38:49 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/nt/exgcd/</guid>
      <description>扩展欧几里得算法（ExGCD） // ax+by=gcd(a,b)=g // check a&amp;gt;0 b&amp;gt;0 // if a != b, |x|&amp;lt;b, |y|&amp;lt;a template&amp;lt;typename T&amp;gt; void exgcd(T a,T b,T &amp;amp;g,T &amp;amp;x,T &amp;amp;y) { if(!b) { g=a; x=1; y=0; } else { exgcd(b,a%b,g,y,x); y-=a/b*x; } } 求逆元 template&amp;lt;typename T&amp;gt; void exgcd(T a,T b,T &amp;amp;g,T &amp;amp;x,T &amp;amp;y) { if(!b) { g=a; x=1; y=0; } else { exgcd(b,a%b,g,y,x); y-=a/b*x; } } template&amp;lt;typename T&amp;gt; T inv(T a,T m) { T g,x,y; exgcd(a,m,g,x,y); if(g!=1) return -1; // no inverse element if(x&amp;lt;0) x+=m; return x; } 不定方</description>
    </item>
    
    <item>
      <title>[模板] bitset &amp; 位图</title>
      <link>https://ottffyzy.github.io/tpls/ds/bitset/</link>
      <pubDate>Thu, 22 Oct 2020 18:03:19 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/bitset/</guid>
      <description>std::bitset #include &amp;lt;bitset&amp;gt; bitset&amp;lt;M&amp;gt; bs; bs[i]; // access bs.test(i); // access bs.count(i); // count 1 bs.size(); bs.any(); bs.none(); bs.all(); // cpp11 bs.set(); bs.set(i); // set i-th bit to 1 bs.reset(); bs.reset(i); bs.flip(); bs.flip(i); bs.to_string(); bs.to_ulong(); bs.to_ullong(); // cpp11 cout&amp;lt;&amp;lt;bs&amp;lt;&amp;lt;endl; 手写位图 Bitmap template&amp;lt;size_t M&amp;gt; struct BitMap { typedef unsigned int UI; UI map[M/32+1]; void reset() { memset(map,0,sizeof(map)); } void set() { memset(map,0xff,sizeof(map)); } void set(int i) { map[i&amp;gt;&amp;gt;5]|=1U&amp;lt;&amp;lt;(i&amp;amp;31); } void reset(int i) { map[i&amp;gt;&amp;gt;5]&amp;amp;=~(1U&amp;lt;&amp;lt;(i&amp;amp;31)); } void flip(int i) { map[i&amp;gt;&amp;gt;5]^=1U&amp;lt;&amp;lt;(i&amp;amp;31); } bool test(int i) { return map[i&amp;gt;&amp;gt;5]&amp;amp;(1U&amp;lt;&amp;lt;(i&amp;amp;31)); } };</description>
    </item>
    
    <item>
      <title>[模板] 对拍程序</title>
      <link>https://ottffyzy.github.io/tpls/others/checker/</link>
      <pubDate>Tue, 20 Oct 2020 00:10:35 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/checker/</guid>
      <description>对拍程序 from os import system tc=0 while True: system(&amp;#34;python data.py &amp;gt; data.in&amp;#34;) system(&amp;#34;std.exe &amp;lt; data.in &amp;gt; std.out&amp;#34;) system(&amp;#34;my.exe &amp;lt; data.in &amp;gt; my.out&amp;#34;) # system(&amp;#34;diff std.out my.out &amp;gt; diff.out&amp;#34;): if system(&amp;#34;fc std.out my.out &amp;gt; diff.out&amp;#34;): print(&amp;#34;WA&amp;#34;) break else: tc += 1 print(&amp;#34;AC #%d&amp;#34;%tc) print(&amp;#34;-------------------- data.in --------------------&amp;#34;) # system(&amp;#34;cat data.in&amp;#34;) system(&amp;#34;type data.in&amp;#34;) print(&amp;#34;-------------------- std.out --------------------&amp;#34;) system(&amp;#34;type std.out&amp;#34;) print(&amp;#34;-------------------- my.out ---------------------&amp;#34;) system(&amp;#34;type my.out&amp;#34;) #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main() { int tc=0; while(1) { system(&amp;#34;data.exe &amp;gt; data.in&amp;#34;); // system(&amp;#34;python data.py &amp;gt; data.in&amp;#34;); system(&amp;#34;std.exe &amp;lt; data.in &amp;gt; std.out&amp;#34;); system(&amp;#34;my.exe &amp;lt; data.in &amp;gt; my.out&amp;#34;); // system(&amp;#34;diff std.out my.out &amp;gt; diff.out&amp;#34;): if(system(&amp;#34;fc</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 树状数组 Binary Index Tree/Fenwick Tree</title>
      <link>https://ottffyzy.github.io/tpls/ds/bit/</link>
      <pubDate>Thu, 01 Oct 2020 12:09:44 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/bit/</guid>
      <description>树状数组 Binary Index Tree/Fenwick Tree 1d 单点修改，区间询问 // T must + - // id 1~n template&amp;lt;typename T,size_t M,typename OpPlus=plus&amp;lt;T&amp;gt;,typename OpMinus=minus&amp;lt;T&amp;gt;&amp;gt; struct BIT { static int lowbit(int x) { return x&amp;amp;(-x); } static OpPlus opp; static OpMinus opm; static T tmp[M+1]; T tree[M+1]; // tree[i] -&amp;gt; sum of [i-lowbit(i)+1,i] int n; void init(int n_) { n=n_; for(int i=1;i&amp;lt;=n;i++) tree[i]=T(0); } void init(int n_,T v[]) // v[0 ~ n_-1] { n=n_; tmp[0]=T(0); for(int i=1;i&amp;lt;=n;i++) tmp[i]=opp(tmp[i-1],v[i]); for(int i=1;i&amp;lt;=n;i++) tree[i]=opm(tmp[i],tmp[i-lowbit(i)]); // for(int i=0;i&amp;lt;n;i++) add(i,v[i]); } void add(int p,T V) { for(;p&amp;lt;=n;p+=lowbit(p)) tree[p]=opp(tree[p],V); }</description>
    </item>
    
    <item>
      <title>[模板] 计时 Timing</title>
      <link>https://ottffyzy.github.io/tpls/others/timing/</link>
      <pubDate>Thu, 01 Oct 2020 00:08:34 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/timing/</guid>
      <description>计时 Timing chrono class Timing { private: typedef chrono::time_point&amp;lt;std::chrono::high_resolution_clock&amp;gt; TP; TP current_time() { return chrono::high_resolution_clock::now(); } TP st,ed; public: void start() { st=current_time(); } void end() { ed=current_time(); } void print() { cout&amp;lt;&amp;lt;chrono::duration_cast&amp;lt;chrono::microseconds&amp;gt;(ed-st).count() &amp;lt;&amp;lt;&amp;#34;ms\n&amp;#34;; } }timing;</description>
    </item>
    
    <item>
      <title>[模板] C&#43;&#43; 日常使用</title>
      <link>https://ottffyzy.github.io/tpls/others/cppmain/</link>
      <pubDate>Tue, 29 Sep 2020 14:34:12 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/cppmain/</guid>
      <description>C++ 日常使用 // #include &amp;lt;bits/stdc++.h&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;climits&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;numeric&amp;gt; #include &amp;lt;utility&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;bitset&amp;gt; #include &amp;lt;complex&amp;gt; #include &amp;lt;random&amp;gt; #include &amp;lt;chrono&amp;gt; #include &amp;lt;array&amp;gt; #include &amp;lt;unordered_set&amp;gt; #include &amp;lt;unordered_map&amp;gt; #include &amp;lt;tuple&amp;gt; using namespace std; using LL = long long; using ULL = unsigned long long; using LD = long double; using PII = pair&amp;lt;int,int&amp;gt;; using VI = vector&amp;lt;int&amp;gt;; using MII = map&amp;lt;int,int&amp;gt;; template&amp;lt;typename T&amp;gt; void cmin(T &amp;amp;x,const T &amp;amp;y)</description>
    </item>
    
    <item>
      <title>[模板][Hash] 安全哈希函数</title>
      <link>https://ottffyzy.github.io/tpls/hash/safehash/</link>
      <pubDate>Mon, 28 Sep 2020 22:00:50 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/hash/safehash/</guid>
      <description>安全哈希函数 struct custom_hash { static uint64_t splitmix64(uint64_t x) { // http://xorshift.di.unimi.it/splitmix64.c x += 0x9e3779b97f4a7c15; x = (x ^ (x &amp;gt;&amp;gt; 30)) * 0xbf58476d1ce4e5b9; x = (x ^ (x &amp;gt;&amp;gt; 27)) * 0x94d049bb133111eb; return x ^ (x &amp;gt;&amp;gt; 31); } size_t operator()(uint64_t x) const { static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count(); return splitmix64(x + FIXED_RANDOM); } }; 用这个函数作为 unordered_set 的第二个参数或 unordered_map 的第三个参数。</description>
    </item>
    
    <item>
      <title>[模板][数论] 模下计算</title>
      <link>https://ottffyzy.github.io/tpls/nt/mod/</link>
      <pubDate>Sun, 27 Sep 2020 23:19:53 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/nt/mod/</guid>
      <description>模下计算 普通 const int MO=1e9+7; inline int add(int x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; return x; } inline int sub(int x,int y) { x-=y; if(x&amp;lt;0) x+=MO; return x; } inline int mul(int x,int y) { return 1LL*x*y%MO; } inline void addv(int &amp;amp;x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; } inline void subv(int &amp;amp;x,int y) { x-=y; if(x&amp;lt;0) x+=MO; } inline void mulv(int &amp;amp;x,int y) { x=1LL*x*y%MO; } int qp(int x,int n) { int ans=1; while(n) { if(n&amp;amp;1) { mulv(ans,x); } mulv(x,x); n&amp;gt;&amp;gt;=1; } return ans; } ModInt template&amp;lt;int MO=1000000007&amp;gt; struct ModInt { int x; ModInt(int x=0):x(x){ norm();</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 左偏树 Leftist Tree</title>
      <link>https://ottffyzy.github.io/tpls/ds/leftist/</link>
      <pubDate>Sun, 27 Sep 2020 19:07:04 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/leftist/</guid>
      <description>左偏树 Leftist Tree // min leftist tree // T must define &amp;lt; // M: the size of the heap template&amp;lt;typename T,size_t M,typename Cmp=less&amp;lt;T&amp;gt;&amp;gt; struct Leftist { static Cmp cmp; T val[M]; int l[M],r[M],d[M]; int nn; // number of node void init() { nn=0; } // using val to build a leftist tree // return the id of the root int build(int n,T val_[]) { queue&amp;lt;int&amp;gt; qu; for(int i=1;i&amp;lt;=n;i++) qu.push(i); int u,v; while(qu.size()&amp;gt;1) { u=qu.front(); qu.pop(); v=qu.front(); qu.pop(); merge(u,v); qu.push(u); } return qu.front(); } int newtree(T v) { val[++nn]=v; r[nn]=l[nn]=d[nn]=0; return nn; } void merge(int &amp;amp;x,int y) // merge</description>
    </item>
    
    <item>
      <title>[模板][图论] 克鲁斯卡尔 Kruskal</title>
      <link>https://ottffyzy.github.io/tpls/gt/kruskal/</link>
      <pubDate>Fri, 25 Sep 2020 16:25:48 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/gt/kruskal/</guid>
      <description>克鲁斯卡尔 Kruskal template&amp;lt;typename T,size_t V,size_t E&amp;gt; struct Kruskal { typedef tuple&amp;lt;T,int,int&amp;gt; Edge; typedef pair&amp;lt;T,int&amp;gt; PTI; Edge edges[E]; int inmst[E]; int n; // number of vertex int m; // number of edge int uf[V]; int find(int x) { return x==uf[x]?x:uf[x]=find(uf[x]); } void init(int n_) { n=n_; m=0; } void addedge(int u,int v,T w) { edges[m++]={w,u,v}; } PTI solve() { int cnt=n; // number of connected component T sum=0; int u,v; T w; for(int i=0;i&amp;lt;n;i++) uf[i]=i; sort(edges,edges+m); for(int i=0;i&amp;lt;m&amp;amp;&amp;amp;cnt&amp;gt;1;i++) { tie(w,u,v)=edges[i]; u=find(u); v=find(v); if(u==v) continue; inmst[i]=1; sum=sum+w; cnt--; uf[u]=v; } return {sum,cnt==1}; // {totval in mst, ismst} }</description>
    </item>
    
    <item>
      <title>[模板][图论] 弗洛伊德 Floyd</title>
      <link>https://ottffyzy.github.io/tpls/gt/floyd/</link>
      <pubDate>Fri, 25 Sep 2020 15:07:23 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/gt/floyd/</guid>
      <description>弗洛伊德 Floyd // T must define &amp;lt; and + template&amp;lt;typename T,size_t V,bool Directed=true,T INF=T(0x3f3f3f3f)&amp;gt; struct Floyd { T g[V][V]; int n; void init(int n_) { n=n_; for(int i=0;i&amp;lt;n;i++) for(int j=0;j&amp;lt;n;j++) g[i][j]=INF; } void addedge(int u,int v,T w) // check multi-edges { g[u][v]=w; if(!Directed) g[v][u]=w; } void cmin(T &amp;amp;x,const T &amp;amp;y) { if(y&amp;lt;x) x=y; } void floyd(Upd =upd) { for(int k=0;k&amp;lt;n;k++) for(int i=0;i&amp;lt;n;i++) for(int j=0;j&amp;lt;n;j++) cmin(g[i][j],g[i][k]+g[k][j]); } };</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 并查集 Union Find / Disjoint Set Union</title>
      <link>https://ottffyzy.github.io/tpls/ds/unionfind/</link>
      <pubDate>Thu, 24 Sep 2020 23:18:06 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/unionfind/</guid>
      <description>并查集 Union Find / Disjoint Set Union 路径压缩和按 size 合并 Union by Size // M: max number of set // id is in [0~M-1] template&amp;lt;size_t M&amp;gt; struct UF { int uf[M],sz[M]; int n; int ns; // number of set void init(int n_) { n=ns=n_; for(int i=0;i&amp;lt;n;i++) uf[i]=i,sz[i]=1; } int find(int x) { return x==uf[x]?x:uf[x]=find(uf[x]); } bool same(int x,int y) { return find(x)==find(y); } bool merge(int x,int y) { x=find(x); y=find(y); if(x==y) return false; if(sz[x]&amp;gt;sz[y]) swap(x,y); sz[y]+=sz[x]; uf[x]=y; ns--; return true; } }; Debug: void show() { cout&amp;lt;&amp;lt;&amp;#34;UnionFind:----------------------\n&amp;#34;; cout&amp;lt;&amp;lt;&amp;#34;id:&amp;#34;; for(int i=0;i&amp;lt;n;i++) cout&amp;lt;&amp;lt;&amp;#39;\t&amp;#39;&amp;lt;&amp;lt;i; cout&amp;lt;&amp;lt;&amp;#39;\n&amp;#39;;</description>
    </item>
    
    <item>
      <title>[模板][图论] 迪杰斯特拉 Dijkstra</title>
      <link>https://ottffyzy.github.io/tpls/gt/dijkstra/</link>
      <pubDate>Thu, 24 Sep 2020 19:10:04 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/gt/dijkstra/</guid>
      <description>迪杰斯特拉 Dijkstra 模板（priority_queue） // T must define &amp;lt; and + // V: max number of vertex [0~V-1] template&amp;lt;typename T,size_t V,bool Directed=true, T INF=T(0x3f3f3f3f),T ZERO=T(0)&amp;gt; struct G { typedef pair&amp;lt;T,int&amp;gt; PTI; vector&amp;lt;PTI&amp;gt; g[V]; T dis[V]; int vis[V]; int n; void init(int n_) { n=n_; for(int i=0;i&amp;lt;n;i++) g[i].clear(); } void addedge(int u,int v,T w) { g[u].emplace_back(w,v); if(!Directed) g[v].emplace_back(w,u); } void dijkstra(int st,int ed=-1) // ed=-1 no destination { for(int i=0;i&amp;lt;n;i++) dis[i]=INF,vis[i]=0; priority_queue&amp;lt;PTI,vector&amp;lt;PTI&amp;gt;,greater&amp;lt;PTI&amp;gt; &amp;gt; qu; dis[st]=ZERO; qu.emplace(ZERO,st); while(!qu.empty()) { PTI p=qu.top(); qu.pop();</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 二叉堆 Binary Heap</title>
      <link>https://ottffyzy.github.io/tpls/ds/binaryheap/</link>
      <pubDate>Wed, 23 Sep 2020 23:12:58 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/binaryheap/</guid>
      <description>二叉堆 Binary Heap 模板：普通二叉堆 Heap // T must define &amp;lt; // min heap // M: max size of heap template&amp;lt;typename T,size_t M,typename Cmp=less&amp;lt;T&amp;gt;&amp;gt; struct Heap { static Cmp cmp; T h[M+1]; int n; void init() { n=0; } void init(T h_[],int n_) // h[0~n-1] { n=n_; for(int i=1;i&amp;lt;=n;i++) h[i]=h_[i-1]; for(int i=n/2;i;i--) sink(i); // O(n) } void push(T x) { h[++n]=x; swim(n); } T pop() { T res=h[1]; h[1]=h[n--]; sink(1); return res; } T top() { return h[1]; } // check n&amp;gt;=1 int size() { return n; } bool empty() { return</description>
    </item>
    
  </channel>
</rss>