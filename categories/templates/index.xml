<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Templates on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/categories/templates/</link>
    <description>Recent content in Templates on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 27 Sep 2020 23:19:53 -0400</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/categories/templates/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][数论] 模下计算</title>
      <link>https://ottffyzy.github.io/templates/nt/mod/</link>
      <pubDate>Sun, 27 Sep 2020 23:19:53 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/nt/mod/</guid>
      <description>模下计算 普通 const int MO=1e9+7; inline int add(int x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; return x; } inline int sub(int x,int y) { x-=y; if(x&amp;lt;0) x+=MO; return x; } inline int mul(int x,int y) { return 1LL*x*y%MO; } inline void addv(int &amp;amp;x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; } inline void subv(int &amp;amp;x,int y) { x-=y; if(x&amp;lt;0) x+=MO; } inline void mulv(int &amp;amp;x,int y) { x=1LL*x*y%MO; } int qp(int x,int n) { int ans=1; while(n) { if(n&amp;amp;1) mulv(ans,x); mulv(x,x); n&amp;gt;&amp;gt;=1; } return ans; } Mint template&amp;lt;size_t MO=1000000007&amp;gt; struct Mint { int x; Mint(int x=0):x(x){} void read() {</description>
    </item>
    
    <item>
      <title>[模板][图论] 克鲁斯卡尔 Kruskal</title>
      <link>https://ottffyzy.github.io/templates/gt/kruskal/</link>
      <pubDate>Fri, 25 Sep 2020 16:25:48 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/gt/kruskal/</guid>
      <description>克鲁斯卡尔 Kruskal template&amp;lt;typename T,size_t V,size_t E&amp;gt; struct Kruskal { typedef tuple&amp;lt;T,int,int&amp;gt; Edge; typedef pair&amp;lt;T,int&amp;gt; PTI; Edge edges[E]; int inmst[E]; int n; // number of vertex int m; // number of edge int uf[V]; int find(int x) { return x==uf[x]?x:uf[x]=find(uf[x]); } void init(int n_) { n=n_; m=0; } void addedge(int u,int v,T w) { edges[m++]=Edge(w,u,v); } PTI solve(int cc=1) // number of connected component { int cnt=n; T sum=0; int u,v; T w; for(int i=0;i&amp;lt;n;i++) uf[i]=i; sort(edges,edges+m); for(int i=0;i&amp;lt;m&amp;amp;&amp;amp;cnt&amp;gt;cc;i++) { tie(w,u,v)=edges[i]; u=find(u); v=find(v); if(u==v) continue; uf[u]=v; cnt--; sum=sum+w; } return {sum,cnt==cc}; } };</description>
    </item>
    
    <item>
      <title>[模板][图论] 弗洛伊德 Floyd</title>
      <link>https://ottffyzy.github.io/templates/gt/floyd/</link>
      <pubDate>Fri, 25 Sep 2020 15:07:23 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/gt/floyd/</guid>
      <description>弗洛伊德 Floyd // T must define &amp;lt; and + template&amp;lt;typename T,size_t V,T INF=T(0x3f3f3f3f)&amp;gt; struct Floyd { T g[V][V]; int n; void cmin(T &amp;amp;x,T y) { if(y&amp;lt;x) x=y; } void init(int n_) { n=n_; for(int i=0;i&amp;lt;n;i++) for(int j=0;j&amp;lt;n;j++) g[i][j]=INF; } void init(int n_,int g_[V][V]) { n=n_; for(int i=0;i&amp;lt;n;i++) for(int j=0;j&amp;lt;n;j++) g[i][j]=g_[i][j]; } void addedge(int u,int v,T w) // check multi-edges { g[u][v]=w; // g[v][u]=w; } void floyd() { for(int k=0;k&amp;lt;n;k++) for(int i=0;i&amp;lt;n;i++) for(int j=0;j&amp;lt;n;j++) cmin(g[i][j],g[i][k]+g[k][j]); } };</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 并查集 Union Find / Disjoint Set Union</title>
      <link>https://ottffyzy.github.io/templates/ds/unionfind/</link>
      <pubDate>Thu, 24 Sep 2020 23:18:06 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/unionfind/</guid>
      <description>并查集 Union Find / Disjoint Set Union 路径压缩和按 size 合并 Union by Size // M: max number of set // id is in [0~M-1] template&amp;lt;size_t M&amp;gt; struct UF { int uf[M],sz[M]; int n; int ns; // number of set void init(int n_) { n=ns=n_; for(int i=0;i&amp;lt;n;i++) uf[i]=i,sz[i]=1; } int find(int x) { return x==uf[x]?x:uf[x]=find(uf[x]); } bool same(int x,int y) { return find(x)==find(y); } bool merge(int x,int y) { x=find(x); y=find(y); if(x==y) return false; if(sz[x]&amp;gt;sz[y]) swap(x,y); sz[y]+=sz[x]; uf[x]=y; ns--; return true; } }; Debug: void show() { cout&amp;lt;&amp;lt;&amp;#34;UnionFind:----------------------\n&amp;#34;; cout&amp;lt;&amp;lt;&amp;#34;id:&amp;#34;; for(int i=0;i&amp;lt;n;i++) cout&amp;lt;&amp;lt;&amp;#39;\t&amp;#39;&amp;lt;&amp;lt;i; cout&amp;lt;&amp;lt;&amp;#39;\n&amp;#39;;</description>
    </item>
    
    <item>
      <title>[模板][图论] 迪杰斯特拉 Dijkstra</title>
      <link>https://ottffyzy.github.io/templates/gt/dijkstra/</link>
      <pubDate>Thu, 24 Sep 2020 19:10:04 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/gt/dijkstra/</guid>
      <description>迪杰斯特拉 Dijkstra 模板（priority_queue） // T must define &amp;lt; and + // V: max number of vertex [0~V-1] template&amp;lt;typename T,size_t V,T INF=T(0x3f3f3f3f),T ZERO=T(0)&amp;gt; struct Dijkstra { typedef pair&amp;lt;T,int&amp;gt; PTI; vector&amp;lt;PTI&amp;gt; g[V]; T dis[V]; int vis[V]; int n; void init(int n_) { n=n_; for(int i=0;i&amp;lt;n;i++) g[i].clear(); } void addedge(int u,int v,T w) { g[u].emplace_back(w,v); // g[v].emplace_back(w,u); undirected } void solve(int st,int ed=-1) // ed=-1 no destination { for(int i=0;i&amp;lt;n;i++) dis[i]=INF,vis[i]=0; priority_queue&amp;lt;PTI,vector&amp;lt;PTI&amp;gt;,greater&amp;lt;PTI&amp;gt; &amp;gt; qu; dis[st]=ZERO; qu.emplace(ZERO,st); while(!qu.empty()) { PTI p=qu.top(); qu.pop(); int</description>
    </item>
    
    <item>
      <title>[模板][数据结构] 二叉堆 Binary Heap</title>
      <link>https://ottffyzy.github.io/templates/ds/binaryheap/</link>
      <pubDate>Wed, 23 Sep 2020 23:12:58 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/binaryheap/</guid>
      <description>二叉堆 Binary Heap 模板：普通二叉堆 Heap // T must define &amp;lt; // min heap // M: max size of heap template&amp;lt;typename T,size_t M&amp;gt; struct Heap { T h[M+1]; int n; void init() { n=0; } void init(T h_[],int n_) // h[0~n-1] { n=n_; for(int i=1;i&amp;lt;=n;i++) h[i]=h_[i-1]; for(int i=n/2;i;i--) sink(i); // O(n) } void push(T x) { h[++n]=x; swim(n); } T pop() { T res=h[1]; h[1]=h[n--]; sink(1); return res; } T top() // check n&amp;gt;=1 { return h[1]; } int size() { return n; } bool empty() { return n==0; } /* Helper</description>
    </item>
    
  </channel>
</rss>