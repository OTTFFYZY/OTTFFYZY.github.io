<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algos on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/algos/</link>
    <description>Recent content in Algos on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 17 Aug 2022 22:27:03 -0700</lastBuildDate><atom:link href="https://ottffyzy.github.io/algos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[算法][图论] Vizing 定理</title>
      <link>https://ottffyzy.github.io/algos/gt/vizing/</link>
      <pubDate>Wed, 17 Aug 2022 22:27:03 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/gt/vizing/</guid>
      <description>Vizing 定理 对于简单图 $G$: $$\chi&amp;#39;(G) \le \Delta (G) &amp;#43; 1$$ 其中 $\chi&#39;(G)$ 为图 $G$ 的边色数，即最少使用多少颜色可以为 $G$ 的边染色，使得相邻边彼此颜色不同。$\Delta (G)$ 是图的最大点度数。 二分图 Vizing 定理 特别的对于二分图我们有 $$\chi&amp;#39;(G) = \Delta (G) $$ 我们可以构</description>
    </item>
    
    <item>
      <title>[算法][DP] 高维前缀和 SOS DP</title>
      <link>https://ottffyzy.github.io/algos/dp/sosdp/</link>
      <pubDate>Sun, 23 Jan 2022 21:53:06 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/dp/sosdp/</guid>
      <description>高维前缀和 SOS DP 子集和问题 其实这类算法更多的是解决子集和 （sum of subset） 问题，因此也叫 SOS DP。 $$ sum[i] = \sum_{j \subseteq i} a[j] $$ 即 $$ sum[i] = \sum_{j | i = i} a[j] $$ 这里我们有个非常显然的做法是可以枚举所有集合判断是否是当前所求</description>
    </item>
    
    <item>
      <title>[算法][图论] 约翰逊 Johnson 算法 全源最短路</title>
      <link>https://ottffyzy.github.io/algos/gt/johnson/</link>
      <pubDate>Wed, 18 Nov 2020 13:33:50 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/gt/johnson/</guid>
      <description>约翰逊 Johnson 算法 全源最短路 对于最短路问题，我们的常用算法是 Dijkstra 算法或 Bellman-Ford 算法。但这两个算法经常解决的是单源最短路问题。 对于多源（全源）最短路问题，我们有一个基于动态规划的优秀算法，Floyd-Warshall</description>
    </item>
    
    <item>
      <title>[算法][数论] 扩展欧几里得算法</title>
      <link>https://ottffyzy.github.io/algos/nt/exgcd/</link>
      <pubDate>Sun, 01 Nov 2020 10:02:34 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/nt/exgcd/</guid>
      <description>扩展欧几里得算法 有时我们需要求解类似于 $ax+by=m$ 的不定方程（丢番图方程），扩展欧几里得算法就是求解这样方程的利器。 除此以外我们可以通过简单地变形处理模逆元和线性同余方程。 裴蜀定理/贝祖定理（Bezout&amp;rs</description>
    </item>
    
    <item>
      <title>[算法][数论] 最大公约数（GCD）与欧几里得算法</title>
      <link>https://ottffyzy.github.io/algos/nt/gcd/</link>
      <pubDate>Sat, 31 Oct 2020 00:53:37 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/nt/gcd/</guid>
      <description>最大公约数（GCD）与欧几里得算法 最大公约数（Greatest Common Divisor，GCD） 两个数最大公约数顾名思义，两个数的所有公约数中最大的。 若正整数 $a,b$ 的质因数分解为 $$a = \prod_{i} p_i ^ {e_{a,i}}$$ $$b = \prod_{i} p_i ^ {e_{b,i}}$$ 则其最大公</description>
    </item>
    
  </channel>
</rss>
