<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/notes/</link>
    <description>Recent content in Notes on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 27 Jan 2022 00:57:41 -0800</lastBuildDate><atom:link href="https://ottffyzy.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《Learning Python》 笔记 第 4 章 介绍 Python 对象类型</title>
      <link>https://ottffyzy.github.io/notes/learningpython/c04/</link>
      <pubDate>Thu, 27 Jan 2022 00:57:41 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/learningpython/c04/</guid>
      <description>第 4 章 介绍 Python 对象类型 Python 知识结构 程序由模块构成 模块包含语句 语句包含表达式 表达式创建并处理对象 为什么要使用内置类型 容易编写，可扩展，往往效率高，是语言标准的一部分。 Python 核心数据类型 数字、字符串、列表、字典、</description>
    </item>
    
    <item>
      <title>[Vim] usr_11</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c11/</link>
      <pubDate>Wed, 19 Jan 2022 21:13:07 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c11/</guid>
      <description>usr_11 从崩溃中恢复 11.1 基本恢复 一般来说如果硬盘没坏，崩溃了之后，文件的大部分内容可以恢复。 vim -r &amp;lt;FILENAME&amp;gt;这时 Vim 会读取 .swp 文件。为安全起见可以另存这个新文件。 可以用 vimdiff 比较新旧文件。 如果编辑</description>
    </item>
    
    <item>
      <title>《Learning Python》 笔记 第 3 章 你应如何运行程序</title>
      <link>https://ottffyzy.github.io/notes/learningpython/c03/</link>
      <pubDate>Wed, 19 Jan 2022 15:54:54 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/learningpython/c03/</guid>
      <description>第 3 章 你应如何运行程序 交互式命令行模式 开始一个交互式会话 &amp;gt; python Windows （cmd）上使用 &amp;lt;CTRL-Z&amp;gt; UNIX/PowerShell 上使用 &amp;lt;CTRL-D&amp;gt; 结束会话。 Python 3.3 中的新 Windows 选项：PATH 和 启动器 启动器用户可以输入 py 代替 python 并避免一些配置步骤。启动器可以更好的显式</description>
    </item>
    
    <item>
      <title>《Learning Python》 笔记 第 2 章 Python 如何运行程序</title>
      <link>https://ottffyzy.github.io/notes/learningpython/c02/</link>
      <pubDate>Mon, 17 Jan 2022 23:47:31 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/learningpython/c02/</guid>
      <description>《Learning Python》 笔记 第 2 章 Python 如何运行程序 Python 解释器简介 Python 是一门编程语言，同时是一个名为解释器的软件包。 解释器是让其他程序运行起来的程序，是代码与机器的计算机硬件之间的软件逻辑层。 Python 包安装</description>
    </item>
    
    <item>
      <title>[Vim] usr_09</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c09/</link>
      <pubDate>Mon, 17 Jan 2022 22:14:37 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c09/</guid>
      <description>usr_09 使用 GUI 版本 09.1 GUI 版本的组件 gvim &amp;lt;FILENAME&amp;gt; vim -g &amp;lt;FILENAME&amp;gt; 标题栏文件名后可能会跟一个符号 - 文件不能被修改 + 已经被修改过 = 文件只读 =+ 只读但被修改过 没有标记则是一个普通的打开但没修改过的文件。 09.2 使用鼠标 使用鼠标可以移动光标和选</description>
    </item>
    
    <item>
      <title>[Vim] usr_08</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c08/</link>
      <pubDate>Mon, 17 Jan 2022 18:42:42 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c08/</guid>
      <description>usr_08 分割窗口 08.1 分割窗口 增加一个水平的分割线 :split要在窗口间跳转可以使用 &amp;lt;CTRL-W&amp;gt;w或 &amp;lt;CTRL-W&amp;gt;&amp;lt;CTRL-W&amp;gt;关闭当前窗口 :close多数时候类似于</description>
    </item>
    
    <item>
      <title>《Learning Python》 笔记 第 1 章 问答环节</title>
      <link>https://ottffyzy.github.io/notes/learningpython/c01/</link>
      <pubDate>Mon, 17 Jan 2022 16:47:13 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/learningpython/c01/</guid>
      <description>《Learning Python》 笔记 第 1 章 问答环节 Python 是一门脚本语言吗 Python 是通用型编程语言，时常扮演脚本语言的角色。 Python 的缺点 比起完全编译并比较底层的语言，执行速度不够快。 使用 Python 可以做什么 系统编程、GUI、</description>
    </item>
    
    <item>
      <title>[Vim] usr_07</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c07/</link>
      <pubDate>Mon, 17 Jan 2022 00:30:44 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c07/</guid>
      <description>usr_07 编辑多个文件 07.1 编辑另一个文件 :edit &amp;lt;FILENAME&amp;gt;需要先保存当前文件的修改，或者使用 :edit! &amp;lt;FILENAME&amp;gt;放弃当前文件修改并打开另一个文件。 想编辑其他文件又不保存当前文件则可</description>
    </item>
    
    <item>
      <title>[Vim] usr_06</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c06/</link>
      <pubDate>Mon, 17 Jan 2022 00:09:44 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c06/</guid>
      <description>usr_06 使用语法高亮 06.1 功能激活 :syntax enable只在支持色彩的终端中生效，在 vimrc 中加入 if &amp;amp;t_Co &amp;gt; 1 syntax enableendif只在 Gui 版本生效则在 gvimrc 加入 syntax enable06.2 颜色显示不出来或者显示出错误的颜色怎么办？ 终端不支持彩色，这时 vim 会</description>
    </item>
    
    <item>
      <title>[Vim] usr_05</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c05/</link>
      <pubDate>Sat, 15 Jan 2022 17:10:30 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c05/</guid>
      <description>usr_05 选项设置 05.1 vimrc 文件 可以使用如下命令打开 Vim 配置文件 :edit $MYVIMRC可以在开头放上 source $VIMRUNTIME/defaults.vim来导入默认配置。vimrc 文件可以包含任何冒号命令。 05.2 vimrc 示例解释 if has(&amp;#34;vms&amp;#34;) set</description>
    </item>
    
    <item>
      <title>[Vim] usr_04</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c04/</link>
      <pubDate>Thu, 13 Jan 2022 23:52:19 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c04/</guid>
      <description>usr_04 作小改动 04.1 操作符与动作 Vim 只删除从当前位置到”动作“把光标移动到的位置的前一个位置。是否包括光标所在的字符取决于你使用的移动命令。包括当前字符在参考手册中称为 inclusive、否则成为 exclusi</description>
    </item>
    
    <item>
      <title>[Vim] usr_03</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c03/</link>
      <pubDate>Tue, 11 Jan 2022 22:38:05 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c03/</guid>
      <description>usr_03 移动 03.1 词移动 移动到下一个词开头位置 w移动到上一个词开头 b移动到下一个 单词末尾 e移动到前一个 单词末尾 ge一个单词以非单词字符（. - ( 等）结尾，要改变那些是单词字符详见 iskeyword 复位 iskeyword :set iskeyword$如果</description>
    </item>
    
    <item>
      <title>[Vim] usr_02</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c02/</link>
      <pubDate>Tue, 11 Jan 2022 00:23:08 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c02/</guid>
      <description>usr_02 Vim 初步 02.1 第一次运行 Vim &amp;gt;gvim file.txt &amp;gt;vim file.txt 02.2 插入文本 普通模式 -&amp;gt; 插入模式 Insert。 i插入模式 -&amp;gt; 普通模式 &amp;lt;ESC&amp;gt;显示当前模式 :set showmode02.3 光标移动 kh l j02.4 删除字符 删除光标处的字符 x删除整行 dd删除两行（与下行）</description>
    </item>
    
    <item>
      <title>[Vim] usr_01</title>
      <link>https://ottffyzy.github.io/notes/vimusermanual/c01/</link>
      <pubDate>Mon, 10 Jan 2022 21:03:05 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/vimusermanual/c01/</guid>
      <description>usr_01 检查是否是 vi 兼容模式 :set compatible?查找配置文件 :scriptnames运行 vim tutor &amp;gt;vimtutor vimtutor 笔记 移动 ^ k&amp;lt; h l &amp;gt; j v不保存退出 :q!&amp;lt;ENTER&amp;gt;保存退出 :wq&amp;lt;ENTER&amp;gt; 普通模式 删除光标位置的字符 x普通</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 16 章 模板与泛型编程</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c16/</link>
      <pubDate>Thu, 19 Aug 2021 22:26:25 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c16/</guid>
      <description>第 16 章 模板与泛型编程 本章内容随便记记，应该后续会跟进专门的书籍仔细学习。 16.1 定义模板 16.1.1 函数模板 函数模板 function template 模板参数 template parameter 模板参数列表 template parameter list 模板定义中，模板参数列表不能为空？ 使用模板时，我们隐式或显示的指定</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 14 章 重载运算与类型转换</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c14/</link>
      <pubDate>Sun, 01 Aug 2021 00:46:07 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c14/</guid>
      <description>第 14 章 重载运算与类型转换 14.1 基本概念 重载的运算符是具有特殊名字的函数。 重载运算符的参数数量与该运算符作用的运算对象数量一样多。除了重载的函数调用运算符 operator() 之外其他重载运算符不能含有默认实参。 一个重载运算符</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 13 章 拷贝控制</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c13/</link>
      <pubDate>Wed, 21 Jul 2021 22:57:24 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c13/</guid>
      <description>第 13 章 拷贝控制 拷贝控制 copy control 操作包括： 拷贝构造函数 copy constructor 拷贝赋值运算符 copy-assignment operator 移动构造函数 move constructor 移动赋值运算符 move-assignment operator 析构函数 destructor 13.1 拷贝、赋值与销毁 合成拷贝构造函数 synthesized copy constructor #include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;using namespace std; class A { public: string name; A() : name(&amp;#34;&amp;#34;) { cout &amp;lt;&amp;lt; &amp;#34;default ctor&amp;#34; &amp;lt;&amp;lt; endl; } A(string</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 12 章 动态内存</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c12/</link>
      <pubDate>Wed, 07 Jul 2021 00:59:01 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c12/</guid>
      <description>第 12 章 动态内存 静态内存用来存储 局部 static 对象，类 static 成员，定义在任何函数之外的变量。 栈内存用来存储 定义在函数内的非 static 对象。 除了这两部分，程序还拥有一个内存池。这部分内存被称为自由空间 free store 或 堆 heap。程序用</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 11 章 关联容器</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c11/</link>
      <pubDate>Mon, 05 Jul 2021 00:50:38 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c11/</guid>
      <description>第 11 章 关联容器 关联容器 associative-container map set multimap multiset unordered_map unordered_set unordered_multimap unordered_multiset 11.1 使用关联容器 map 通常称为关联数组 associative array。 11.2 关联容器概述 有序容器的关键字类型 需要定义 &amp;lt;，且该运算需要满足严格弱序 strict weak ordering。 11.2.3 pair 类型 pair 定义在</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 10 章 泛型算法</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c10/</link>
      <pubDate>Mon, 21 Jun 2021 20:52:05 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c10/</guid>
      <description>第 10 章 泛型算法 泛型算法 generic algorithm 10.1 概述 大多数算法定义在头文件 algorithm 中。另外在 numeric 种定义了一组数值泛型算法。 一般来说这些算法并不直接操作容器，二十遍历由两个迭代器指定的一个元素范围来进行操作。 10.2 初识泛型算法 10.2.1 只读算</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 9 章 顺序容器</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c9/</link>
      <pubDate>Thu, 17 Jun 2021 22:49:43 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c9/</guid>
      <description>第 9 章 顺序容器 sequential container 9.1 顺序容器概述 vector deque list forward_list array string 9.2 容器库概览 类型别名 意义 iterator 迭代器类型 const_iterator 不能修改元素的迭代器类型 size_type 容器类型最大可能的大小 difference_type 两个迭代器间的距离 value_type 元素类型 reference 元素的左值类型与 value_type&amp;amp; 相同 const_reference 元素的 const 左值类</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 8 章 IO 库</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c8/</link>
      <pubDate>Mon, 14 Jun 2021 20:22:01 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c8/</guid>
      <description>第 8 章 IO 库 8.1 IO 类 头文件 类型 作用 iostream istream, wistream 从流读 ostream, wostream 向流写 iostream,wiostream 读写流 fstream ifstream, wifstream 从文件读 ofstream, wofstream 向文件写 fstream, wfstream 读写文件 sstream istringstream, wistringstream 从 string 读 ostringstream, wostringstream 向 string 写 stringstream, wstringstream 读写 string ifstream 和 istringstream 继承自 istream ofstream 和 ostringstream 继承自 ostream IO 对象没有拷贝和赋值操作。 8.1.2 条件状态 IO 类定</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 7 章 类</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c7/</link>
      <pubDate>Tue, 01 Jun 2021 22:41:30 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c7/</guid>
      <description>第 7 章 类 类的基本思想是数据抽象 data abstraction 和封装 encapsulation。 数据抽象是一种依赖于接口 interface 和实现 implementation 分离的编程/设计技术。 7.1 定义抽象数据类型 引入 this this 是一个常量指针。 成员函数通过隐式参数 this 来访问调用它</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 6 章 函数</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c6/</link>
      <pubDate>Fri, 28 May 2021 11:50:51 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c6/</guid>
      <description>第 6 章 函数 6.1 函数基础 我们可以通过调用运算符 call operator 来执行函数。 形参 parameter 实参 argument 主调函数 calling function 被调函数 called function 空形参列表可以是空的括号，或是 void void f1() {} void f2(void) {} 6.1.1 局部对象 C++ 中名字有作用域，对象有声明周期 lifetime。 名</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 5 章 语句</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c5/</link>
      <pubDate>Thu, 27 May 2021 00:42:06 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c5/</guid>
      <description>第 5 章 语句 一个表达式末尾加上分号就变成了表达式语句 expression statement。 空语句 null statement。 复合语句 compound statement 也称块 block 是用花括号括起来的语句和声明序列。在程序某个位置如果语法上需要一个语句，逻辑上需</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 4 章 表达式</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c4/</link>
      <pubDate>Tue, 25 May 2021 22:00:23 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c4/</guid>
      <description>第 4 章 表达式 表达式 expression 由一个或多个运算对象 operand 组成，对表达式求值将得到一个结果。字面值和变量是最简单的表达式，运算符 operator 将一个或多个对象组合起来可以生成复杂的表达式。 4.1 基础 4.1.1 基本概念 对于复杂的表达式，需要了</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 3 章 字符串、向量和数组</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c3/</link>
      <pubDate>Thu, 20 May 2021 23:32:08 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c3/</guid>
      <description>第 3 章 字符串、向量和数组 3.1 命名空间的 using 声明 using 声明 using declaration using namesapce::name; 头文件不应包含 using 声明。因为头文件会被包含到其他文件中去，使用 using 声明则可能带来名字冲突。 3.2 标准库类型 string 3.2.1 定义和初始化 string 对象 #include &amp;lt;iostream&amp;gt;#include &amp;lt;cassert&amp;gt;#include &amp;lt;iterator&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;cctype&amp;gt; int main() { { // string::string()</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 2 章 变量和基本类型</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c2/</link>
      <pubDate>Mon, 17 May 2021 21:07:47 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c2/</guid>
      <description>第 2 章 变量和基本类型 2.1 基本内置类型 基本内置类型分为算数类型 arithmetic type 和空类型 void 2.1.1 算数类型 整型 integral type 和浮点型 注意 C++ 只规定了每种算数类型的最小尺寸，所以不同机器上可能会有差异。 类型 含义 最小尺寸 bool 未定义 char 8 位 wchar_t 宽字</description>
    </item>
    
    <item>
      <title>《C&#43;&#43; Primer》 拾遗 第 1 章 开始</title>
      <link>https://ottffyzy.github.io/notes/cppprimer/c1/</link>
      <pubDate>Thu, 17 Sep 2020 14:07:57 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/cppprimer/c1/</guid>
      <description>第 1 章 开始 1.1 查看程序返回值 当一个程序运行结束时，我们想知道 main 函数的返回值可以使用以下命令。 Win &amp;gt; echo %ERRORLEVEL% Unix $ echo $? 1.2 标准库有四个输入输出对象 cin // 标准输入 cout // 标准输出 cerr // 标准错误 clog // 输出程序运行时的一般信息 字面</description>
    </item>
    
    <item>
      <title>《概率、统计与随机过程》 笔记 第 1 章 概率论导论</title>
      <link>https://ottffyzy.github.io/notes/probabilitysrp4e/c1/</link>
      <pubDate>Tue, 15 Sep 2020 14:13:07 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/probabilitysrp4e/c1/</guid>
      <description>第 1 章 概率论导论 1.2 概率的不同类型 直观概率：基于直观来处理判断 古典概率：事件概率不是实验性的，通过预先计算事件 $E$ 可能发生的次数 $n_E$ 形成一个比值 $n_E / n$ 其中 $n$ 是所有可能的结果。此时需要所有的结果是等可能的。 古</description>
    </item>
    
    <item>
      <title>《Effective C&#43;&#43;》 笔记 1. 让自己习惯 C&#43;&#43;</title>
      <link>https://ottffyzy.github.io/notes/effectivecpp/c1/</link>
      <pubDate>Sun, 13 Sep 2020 22:07:50 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/effectivecpp/c1/</guid>
      <description>1. 让自己习惯 C++ 条款 01：视 C++ 为一个语言联邦 C++ 是一个多重泛型编程语言（multiparadigm programming language）。 C++ 同时支持过程（procedural）形式、面向对象（object-oriented</description>
    </item>
    
    <item>
      <title>《汇编语言》 笔记  实验 1 查看 CPU 和内存，用机器指令和汇编指令编程</title>
      <link>https://ottffyzy.github.io/notes/assemblylanguage/e1/</link>
      <pubDate>Thu, 10 Sep 2020 19:08:42 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/assemblylanguage/e1/</guid>
      <description>实验 1 查看 CPU 和内存，用机器指令和汇编指令编程 想在 win10 上玩这个需要自己下载 DOSBox 和 debug.exe。 之后用 DOSBox 运行 debug 即可开始书中的实验。 R 命令：查看、修改寄存器 进入 debug 模式后输入 $r$ 回车后可以查看 CPU 寄存器内容。 输</description>
    </item>
    
    <item>
      <title>《汇编语言》 笔记 第 2 章 寄存器</title>
      <link>https://ottffyzy.github.io/notes/assemblylanguage/c2/</link>
      <pubDate>Tue, 08 Sep 2020 18:44:17 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/assemblylanguage/c2/</guid>
      <description>第 2 章 寄存器 在 CPU 中： 运算器处理信息 寄存器储存信息 控制器控制各种器件 内部总线连接各种器件，在他们之间传输数据 对汇编程序员最重要的部件就是寄存器，寄存器是程序员可以用指令读写的部件，程序员通过改变寄存器中</description>
    </item>
    
    <item>
      <title>《汇编语言》 笔记 第 1 章 基础知识</title>
      <link>https://ottffyzy.github.io/notes/assemblylanguage/c1/</link>
      <pubDate>Tue, 08 Sep 2020 18:01:38 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/assemblylanguage/c1/</guid>
      <description>第 1 章 基础知识 1.1 机器语言 CPU 提供机器指令集也就是机器语言。 早期卡片打孔就是使用的机器语言。 机器语言难于书写阅读查错于是产生了汇编语言 1.2 汇编语言的产生 汇编语言的主题是汇编指令。汇编指令采用了更便于人类书写</description>
    </item>
    
    <item>
      <title>使用 Typora 写 Markdown</title>
      <link>https://ottffyzy.github.io/notes/markdown/</link>
      <pubDate>Thu, 03 Sep 2020 21:53:13 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/notes/markdown/</guid>
      <description>0 简介 Markdown 与 Typora 什么是 Markdown？ Markdown 是一种轻量级标记语言，可以通过格式标记把普通文本变成带有格式的富文本。 什么是 Typora？ Typora 是使用 Markdown 语言的一个编辑器。与其他 Markdown 编辑器不同的是，Markdown 的效</description>
    </item>
    
  </channel>
</rss>
