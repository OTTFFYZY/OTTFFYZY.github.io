<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BIT on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/bit/</link>
    <description>Recent content in BIT on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 01 Oct 2020 12:09:44 -0400</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tags/bit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][数据结构] 树状数组 Binary Index Tree/Fenwick Tree</title>
      <link>https://ottffyzy.github.io/templates/ds/bit/</link>
      <pubDate>Thu, 01 Oct 2020 12:09:44 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/templates/ds/bit/</guid>
      <description>树状数组 Binary Index Tree/Fenwick Tree 1d 单点修改，区间询问 // id 0~n-1 template&amp;lt;typename T,size_t M,typename OpPlus=plus&amp;lt;T&amp;gt;,typename OpMinus=minus&amp;lt;T&amp;gt;&amp;gt; struct BIT { static int lowbit(int x) { return x&amp;amp;(-x); } T tree[M+1]; // tree[i] -&amp;gt; [i-lowbit(i)+1,i] T tmp[M+1]; OpPlus opp; OpMinus opm; int n; void init(int n_) { n=n_; for(int i=1;i&amp;lt;=n;i++) tree[i]=T(0); } void init(int n_,T[] v) { n=n_; tmp[0]=T(0); for(int i=0;i&amp;lt;n;i++) tmp[i+1]=opp(tmp[i],v[i]); for(int i=1;i&amp;lt;=n;i++) tree[i]=opm(tmp[i],tmp[i-lowbit(i)]); // for(int i=0;i&amp;lt;n;i++) add(i,v[i]); } void add(int p,T V) { for(p=p+1;p&amp;lt;=n;p+=lowbit(p)) tree[i]=opp(tree[i],V); } T sum(int p) { T ans(0); for(p=p+1;p;p-=lowbit(p)) ans=opp(ans,tree[p]); return ans; } T sum(int l,int</description>
    </item>
    
  </channel>
</rss>