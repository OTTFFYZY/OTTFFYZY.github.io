<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数论 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/%E6%95%B0%E8%AE%BA/</link>
    <description>Recent content in 数论 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 01 Nov 2020 22:38:49 -0500</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tags/%E6%95%B0%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][数论] 扩展欧几里得算法（ExGCD）</title>
      <link>https://ottffyzy.github.io/tpls/nt/exgcd/</link>
      <pubDate>Sun, 01 Nov 2020 22:38:49 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/nt/exgcd/</guid>
      <description>扩展欧几里得算法（ExGCD） // ax+by=gcd(a,b)=g // check a&amp;gt;0 b&amp;gt;0 // if a != b, |x|&amp;lt;b, |y|&amp;lt;a template&amp;lt;typename T&amp;gt; void exgcd(T a,T b,T &amp;amp;g,T &amp;amp;x,T &amp;amp;y) { if(!b) { g=a; x=1; y=0; } else { exgcd(b,a%b,g,y,x); y-=a/b*x; } } 求逆元 template&amp;lt;typename T&amp;gt; void exgcd(T a,T b,T &amp;amp;g,T &amp;amp;x,T &amp;amp;y) { if(!b) { g=a; x=1; y=0; } else { exgcd(b,a%b,g,y,x); y-=a/b*x; } } template&amp;lt;typename T&amp;gt; T inv(T a,T m) { T g,x,y; exgcd(a,m,g,x,y); if(g!=1) return -1; // no inverse element if(x&amp;lt;0) x+=m; return x; } 不定方</description>
    </item>
    
    <item>
      <title>[算法][数论] 扩展欧几里得算法</title>
      <link>https://ottffyzy.github.io/algos/nt/exgcd/</link>
      <pubDate>Sun, 01 Nov 2020 10:02:34 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/nt/exgcd/</guid>
      <description>扩展欧几里得算法 有时我们需要求解类似于 $ax+by=m$ 的不定方程（丢番图方程），扩展欧几里得算法就是求解这样方程的利器。 除此以外我们可以通过简单地变形处理模逆元和线性同余方程。 裴蜀定理/贝祖定理（Bezout&amp;rs</description>
    </item>
    
    <item>
      <title>[算法][数论] 最大公约数（GCD）与欧几里得算法</title>
      <link>https://ottffyzy.github.io/algos/nt/gcd/</link>
      <pubDate>Sat, 31 Oct 2020 00:53:37 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/nt/gcd/</guid>
      <description>最大公约数（GCD）与欧几里得算法 最大公约数（Greatest Common Divisor，GCD） 两个数最大公约数顾名思义，两个数的所有公约数中最大的。 若正整数 $a,b$ 的质因数分解为 $$a = \prod_{i} p_i ^ {e_{a,i}}$$ $$b = \prod_{i} p_i ^ {e_{b,i}}$$ 则其最大公</description>
    </item>
    
    <item>
      <title>[模板][数论] 模下计算</title>
      <link>https://ottffyzy.github.io/tpls/nt/mod/</link>
      <pubDate>Sun, 27 Sep 2020 23:19:53 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/nt/mod/</guid>
      <description>模下计算 普通 const int MO=1e9+7; inline int add(int x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; return x; } inline int sub(int x,int y) { x-=y; if(x&amp;lt;0) x+=MO; return x; } inline int mul(int x,int y) { return 1LL*x*y%MO; } inline void addv(int &amp;amp;x,int y) { x+=y; if(x&amp;gt;=MO) x-=MO; } inline void subv(int &amp;amp;x,int y) { x-=y; if(x&amp;lt;0) x+=MO; } inline void mulv(int &amp;amp;x,int y) { x=1LL*x*y%MO; } int qp(int x,int n) { int ans=1; while(n) { if(n&amp;amp;1) { mulv(ans,x); } mulv(x,x); n&amp;gt;&amp;gt;=1; } return ans; } ModInt template&amp;lt;int MO=1000000007&amp;gt; struct ModInt { int x; ModInt(int x=0):x(x){ norm();</description>
    </item>
    
    <item>
      <title>[AtCoder] Beginner Contest 177 E - Coprime</title>
      <link>https://ottffyzy.github.io/sols/atcoder/abc177/e/</link>
      <pubDate>Sat, 05 Sep 2020 01:40:51 -0400</pubDate>
      
      <guid>https://ottffyzy.github.io/sols/atcoder/abc177/e/</guid>
      <description>E - Coprime 题目大意 给出数组 $A$ 如果其中数字两两互质则返回 “pairwise coprime”，如果整个数组 $gcd$ 为 $1$ 则返回 “setwise coprime”，其他情况返回 “not coprime” 简要题解 显然 setwise 很好判</description>
    </item>
    
  </channel>
</rss>