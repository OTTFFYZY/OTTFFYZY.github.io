<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图论 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/%E5%9B%BE%E8%AE%BA/</link>
    <description>Recent content in 图论 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 17 Aug 2022 22:27:03 -0700</lastBuildDate><atom:link href="https://ottffyzy.github.io/tags/%E5%9B%BE%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[算法][图论] Vizing 定理</title>
      <link>https://ottffyzy.github.io/algos/gt/vizing/</link>
      <pubDate>Wed, 17 Aug 2022 22:27:03 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/gt/vizing/</guid>
      <description>Vizing 定理 对于简单图 $G$: $$\chi&amp;#39;(G) \le \Delta (G) &amp;#43; 1$$ 其中 $\chi&#39;(G)$ 为图 $G$ 的边色数，即最少使用多少颜色可以为 $G$ 的边染色，使得相邻边彼此颜色不同。$\Delta (G)$ 是图的最大点度数。 二分图 Vizing 定理 特别的对于二分图我们有 $$\chi&amp;#39;(G) = \Delta (G) $$ 我们可以构</description>
    </item>
    
    <item>
      <title>[算法][图论] 约翰逊 Johnson 算法 全源最短路</title>
      <link>https://ottffyzy.github.io/algos/gt/johnson/</link>
      <pubDate>Wed, 18 Nov 2020 13:33:50 -0500</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/gt/johnson/</guid>
      <description>约翰逊 Johnson 算法 全源最短路 对于最短路问题，我们的常用算法是 Dijkstra 算法或 Bellman-Ford 算法。但这两个算法经常解决的是单源最短路问题。 对于多源（全源）最短路问题，我们有一个基于动态规划的优秀算法，Floyd-Warshall</description>
    </item>
    
  </channel>
</rss>
