<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>状态压缩 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/</link>
    <description>Recent content in 状态压缩 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 28 Jan 2025 00:25:28 -0800</lastBuildDate><atom:link href="https://ottffyzy.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[CF] C. Make a Square - Educational Codeforces Round 42 (Rated for Div. 2)</title>
      <link>https://ottffyzy.github.io/sols/codeforces/962/c/</link>
      <pubDate>Tue, 28 Jan 2025 00:25:28 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/sols/codeforces/962/c/</guid>
      <description>https://codeforces.com/contest/962/problem/C 题目大意 给出数字 $n \ (1 \le n \le 2 \times 10^9)$。问能否从 $n$ 中删掉一些数字得到另一个不含前导零的数字（循序不变），使得新数字是一个平方数。不能输出 $-1$，能则输出最少需要删除的数。 简要题解 这里注意到一</description>
    </item>
    
    <item>
      <title>[算法][DP] 高维前缀和 SOS DP</title>
      <link>https://ottffyzy.github.io/algos/dp/sosdp/</link>
      <pubDate>Sun, 23 Jan 2022 21:53:06 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/algos/dp/sosdp/</guid>
      <description>高维前缀和 SOS DP 子集和问题 其实这类算法更多的是解决子集和 （sum of subset） 问题，因此也叫 SOS DP。 $$ sum[i] = \sum_{j \subseteq i} a[j] $$ 即 $$ sum[i] = \sum_{j | i = i} a[j] $$ 这里我们有个非常显然的做法是可以枚举所有集合判断是否是当前所求</description>
    </item>
    
  </channel>
</rss>
