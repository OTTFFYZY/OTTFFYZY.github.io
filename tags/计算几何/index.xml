<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算几何 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</link>
    <description>Recent content in 计算几何 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 03 Jul 2021 12:42:06 -0700</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][计算几何] 平面最近点对</title>
      <link>https://ottffyzy.github.io/tpls/cg/nearestpair/</link>
      <pubDate>Sat, 03 Jul 2021 12:42:06 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/cg/nearestpair/</guid>
      <description>Title typedef long long LL; typedef vector&amp;lt;int&amp;gt; VI; typedef vector&amp;lt;VI&amp;gt; VVI; const LL INF=0x3f3f3f3f3f3f3f3f; inline LL sqr(LL x){ return x*x; } inline LL dis(const VI &amp;amp;a,const VI &amp;amp;b) { return sqr(a[0]-b[0])+sqr(a[1]-b[1]); } bool cmp(const VI &amp;amp;a, const VI &amp;amp;b) { return a[1]&amp;lt;b[1]; } VVI tmp; LL help(VVI &amp;amp;ps,int l,int r) { int n=r-l+1; if(n&amp;lt;=3) { LL ans=INF; for(int i=l;i&amp;lt;=r;i++) { for(int j=i+1;j&amp;lt;=r;j++) ans=min(ans,dis(ps[i],ps[j])); } sort(ps.begin()+l, ps.begin()+r+1, cmp); return ans; } int m=(l+r)&amp;gt;&amp;gt;1; int mp=ps[m][0]; LL ans=min(help(ps,l,m),help(ps,m+1,r)); int i=l,j=m+1,p=l; while(i&amp;lt;=m || j&amp;lt;=r) { if(i&amp;gt;m || j&amp;lt;=r&amp;amp;&amp;amp;cmp(ps[j],ps[i])) { tmp[p++]=ps[j++]; } else { tmp[p++]=ps[i++]; } } copy(tmp.begin()+l, tmp.begin()+r+1,ps.begin()+l); p=0; for(int i=l;i&amp;lt;=r;i++) { if(sqr(ps[i][0]-mp)</description>
    </item>
    
  </channel>
</rss>