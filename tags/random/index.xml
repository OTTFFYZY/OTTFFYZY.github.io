<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/random/</link>
    <description>Recent content in Random on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 25 Apr 2021 18:19:08 -0700</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tags/random/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板] 随机数 Random</title>
      <link>https://ottffyzy.github.io/tpls/others/rnd/</link>
      <pubDate>Sun, 25 Apr 2021 18:19:08 -0700</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/others/rnd/</guid>
      <description>随机数 Random #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long LL; struct FastIO { FastIO() { ios::sync_with_stdio(false); cin.tie(nullptr); } }fastio; mt19937 rnd(chrono::system_clock::now().time_since_epoch().count()); mt19937_64 rnd_64(chrono::system_clock::now().time_since_epoch().count()); // [0,r) int rndi(int r) { return rnd()%r; } // [l,r] r-l+1&amp;lt;=INT_MAX int rndi(int l,int r) { return rnd()%(r-l+1)+l; } LL rndll(LL l,LL r) { return rnd_64()%(r-l+1)+l; } char rndc() { return rndi(-128,127); } char rndc(const string &amp;amp;s) { return s[rndi(s.length())]; } char rnd_lower() { return rndi(26)+&amp;#39;a&amp;#39;; } char rnd_upper() { return rndi(26)+&amp;#39;A&amp;#39;; } char rnd_digit() { return rndi(10)+&amp;#39;0&amp;#39;; } char rnd_alpha() { int r=rndi(52); return r&amp;lt;26?(r+&amp;#39;a&amp;#39;):(r-26+&amp;#39;A&amp;#39;); } char rnd_alphadigit() { int r=rndi(62); if(r&amp;lt;10)</description>
    </item>
    
  </channel>
</rss>