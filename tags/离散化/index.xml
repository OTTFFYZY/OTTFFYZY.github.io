<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>离散化 on OTTFF&#39;s Blog</title>
    <link>https://ottffyzy.github.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/</link>
    <description>Recent content in 离散化 on OTTFF&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 20 Jan 2021 11:39:32 -0800</lastBuildDate>
    
	<atom:link href="https://ottffyzy.github.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[模板][数据结构] 离散化 Discretization</title>
      <link>https://ottffyzy.github.io/tpls/ds/discretization/</link>
      <pubDate>Wed, 20 Jan 2021 11:39:32 -0800</pubDate>
      
      <guid>https://ottffyzy.github.io/tpls/ds/discretization/</guid>
      <description>离散化 Discretization template&amp;lt;typename T, int IdFrom = 0, typename OpLs=less&amp;lt;T&amp;gt;, typename OpEq=equal_to&amp;lt;T&amp;gt;&amp;gt; struct Dctz { static OpLs ls; static OpEq eq; vector&amp;lt;T&amp;gt; x; void add(T v) { x.push_back(v); } void init() { sort(x.begin(),x.end(),ls); x.erase(unique(x.begin(),x.end(),eq),x.end()); } int id(const T &amp;amp;v) { return lower_bound(x.begin(),x.end(),v,ls)-x.begin()+IdFrom; } }; Dctz&amp;lt;int&amp;gt; dc;</description>
    </item>
    
  </channel>
</rss>